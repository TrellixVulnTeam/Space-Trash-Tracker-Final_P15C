// Initialize the Cesium viewer.
const viewer = new Cesium.Viewer('cesiumContainer', {
  imageryProvider: new Cesium.TileMapServiceImageryProvider({
    url: Cesium.buildModuleUrl("Assets/Textures/NaturalEarthII"),
  }),
  baseLayerPicker: false, geocoder: false, homeButton: false, infoBox: false,
  navigationHelpButton: false, sceneModePicker: false
});
// This causes a bug on android, see: https://github.com/CesiumGS/cesium/issues/7871
// viewer.scene.globe.enableLighting = true;

// Give SatelliteJS the TLE's and a specific time.
// Get back a longitude, latitude, height (km).
// We're going to generate a position every 10 seconds from now until 6 seconds from now. 
const totalSeconds = 60 * 60 * 6;
const timestepInSeconds = 10;
const start = Cesium.JulianDate.fromDate(new Date());
const stop = Cesium.JulianDate.addSeconds(start, totalSeconds, new Cesium.JulianDate());
viewer.clock.startTime = start.clone();
viewer.clock.stopTime = stop.clone();
viewer.clock.currentTime = start.clone();
viewer.timeline.zoomTo(start, stop);
viewer.clock.multiplier = 40;
viewer.clock.clockRange = Cesium.ClockRange.LOOP_STOP;

// These 2 lines are published by NORAD and allow us to predict where
// the ISS is at any given moment. They are regularly updated.
// Get the latest from: https://celestrak.com/satcat/tle.php?CATNR=25544. 
//const ISS_TLE =
//  `1 25544U 98067A   21121.52590485  .00001448  00000-0  34473-4 0  9997
//    2 25544  51.6435 213.5204 0002719 305.2287 173.7124 15.48967392281368`;

//addSatellite(viewer, ISS_TLE, true, Cesium.Color.RED);

//const satellites =
//["1 25544U 98067A   21276.48886574  .00005914  00000-0  11575-3 0  9999\n2 25544  51.6455 167.2248 0004114  53.9652 304.3802 15.48917523305371","1 43556U 18046C   21275.70009536  .00006994  00000-0  23049-3 0  9998\n2 43556  51.6410 352.3424 0007275 186.1693 173.9200 15.32555589179726","1 43557U 18046D   21275.77490406  .00006390  00000-0  21616-3 0  9994\n2 43557  51.6412 354.2981 0007478 184.7907 175.3003 15.31863208179653","1 43558U 18046E   21275.75774271  .00010264  00000-0  30650-3 0  9991\n2 43558  51.6414 342.4709 0006119 194.4951 165.5857 15.35177654179858","1 43559U 18046F   21275.66020344  .00012347  00000-0  36322-3 0  9993\n2 43559  51.6414 341.8432 0006168 194.4294 165.6513 15.35449361179632","1 43560U 18046G   21275.59900414  .00012655  00000-0  37566-3 0  9995\n2 43560  51.6418 343.6581 0006382 208.9265 151.1365 15.35139173179823","1 43561U 18046H   21275.77016712  .00009197  00000-0  27988-3 0  9999\n2 43561  51.6417 344.0268 0006513 202.7063 157.3632 15.34712816179391","1 43870U 98067PU  21275.81099082  .00014955  00000-0  15784-3 0  9998\n2 43870  51.6339 108.4847 0002967  22.2005 337.9118 15.64454345158421","1 44031U 98067PX  21275.69616964  .00340514  59963-4  65758-3 0  9993\n2 44031  51.6328  64.6541 0006179 307.9308  52.1143 15.99832749152694","1 44303U 98067QA  21275.98953788  .00021653  00000-0  25019-3 0  9995\n2 44303  51.6373 131.6772 0003896 284.0990  75.9571 15.61818029133402","1 44306U 98067QD  21276.08420530  .00023485  00000-0  26067-3 0  9993\n2 44306  51.6358 129.9346 0004921 283.0737  76.9708 15.62799976133440","1 44329U 98067QE  21275.68501001  .04382427  12114-4  10133-2 0  9993\n2 44329  51.6173  82.5337 0011342 297.1206  62.8659 16.28919678131203","1 44330U 98067QF  21275.86084149  .01326556  12454-2  11094-2 0  9994\n2 44330  51.6177  83.5991 0010746 297.6641  62.3283 16.13248712131184","1 44331U 98067QG  21275.70728751  .02772680  11949-4  10605-2 0  9993\n2 44331  51.6184  82.5648 0011720 299.7405  60.2448 16.23199411131198","1 44332U 98067QH  21275.84772930  .00562578  16061-3  81340-3 0  9992\n2 44332  51.6227  85.1332 0006747 307.2210  52.8186 16.04676976131133","1 44364U 98067QJ  21275.63585710  .00017740  00000-0  20653-3 0  9991\n2 44364  51.6380 134.5587 0005070 280.3597  79.6825 15.61767448128923","1 44427U 98067QM  21276.11680765  .00073238  00000-0  48493-3 0  9997\n2 44427  51.6393 110.5050 0003051 251.6174 201.1103 15.74855775128392","1 44428U 98067QN  21275.88428815  .00428379  87530-4  91352-3 0  9996\n2 44428  51.6279  90.8502 0007361 282.9798  77.0389 15.98034247128637","1 44431U 98067QR  21275.86233148  .00611023  18481-3  97436-3 0  9998\n2 44431  51.6207  89.0220 0008501 286.3654  73.6422 16.03024825128598","1 44790U 98067QV  21276.18938863  .00010724  00000-0  11951-3 0  9992\n2 44790  51.6362 136.4691 0005152 339.7492 120.4825 15.63419627106282","1 44791U 98067QW  21276.05874418  .00031144  00000-0  33060-3 0  9998\n2 44791  51.6367 137.4158 0004270 301.5163  58.5414 15.63778810106264","1 44792U 98067QX  21276.12840301  .00103720  00000-0  64272-3 0  9990\n2 44792  51.6341 121.1884 0002386 278.6461  81.4268 15.76234679106484","1 45043U 98067QY  21275.38543085  .00012794  00000-0  18613-3 0  9994\n2 45043  51.6396 159.8570 0003929 316.2930  43.7750 15.56130747 95144","1 45256U 98067QZ  21276.01504090  .00037474  00000-0  40720-3 0  9990\n2 45256  51.6411 144.6573 0004690 307.1232  52.9333 15.63085346 92073","1 45257U 98067RA  21276.03219559  .00029704  00000-0  34926-3 0  9994\n2 45257  51.6369 146.9161 0004910 312.8085  47.2496 15.61165267 92041","1 45258U 98067RB  21275.94568142  .00024184  00000-0  30612-3 0  9994\n2 45258  51.6380 150.0874 0004191 288.9315  71.1223 15.59351155 91966","1 45259U 98067RC  21276.04023270  .00063796  00000-0  56042-3 0  9992\n2 45259  51.6361 137.9542 0003422 295.8304  64.2339 15.68188256 92167","1 45260U 98067RD  21276.12294615  .00146699  00000-0  88241-3 0  9996\n2 45260  51.6341 132.4510 0003647 267.4188  92.6395 15.76748714 92253","1 45261U 98067RE  21275.76067853  .00117225  00000-0  73365-3 0  9992\n2 45261  51.6320 130.7416 0003597 276.7601  83.2989 15.75951875 92230","1 45262U 98067RF  21276.01727382  .00032040  00000-0  36786-3 0  9999\n2 45262  51.6404 146.1638 0003733 354.0887   6.0062 15.61748958 92066","1 45263U 98067RG  21276.10035700  .00062236  00000-0  54716-3 0  9999\n2 45263  51.6357 138.3490 0003584 291.4248  68.6366 15.68177896 92191","1 45264U 98067RH  21275.28265130  .00014834  00000-0  20848-3 0  9990\n2 45264  51.6412 157.7253 0005673 315.6738  44.3799 15.56916593 91833","1 45265U 98067RJ  21276.06882108  .00009163  00000-0  14840-3 0  9992\n2 45265  51.6403 160.6571 0004204 318.6446  41.4225 15.53571517 91548","1 45597U 98067RK  21276.06487299  .00037031  00000-0  42513-3 0  9995\n2 45597  51.6383 147.9198 0002398  29.4174 330.6954 15.61681726 81402","1 45598U 98067RL  21276.05112520  .00052838  00000-0  52580-3 0  9994\n2 45598  51.6376 144.8166 0001175 123.8476 236.2631 15.65175274 81371","1 45800U 98067RM  21275.42048179  .00012465  00000-0  18908-3 0  9996\n2 45800  51.6411 162.3728 0000466  35.3009 324.8013 15.55011714 73328","1 45809U 98067RN  21275.74163768  .00014301  00000-0  21556-3 0  9996\n2 45809  51.6411 160.7686 0000390 349.0219  11.0764 15.55047277 72359","1 45916U 98067RP  21276.02330545  .00047563  00000-0  50566-3 0  9995\n2 45916  51.6394 148.4098 0002314 229.3172 130.7621 15.63543770 69539","1 46921U 98067RR  21276.06939989  .00023753  00000-0  32864-3 0  9999\n2 46921  51.6409 158.4826 0002727 127.5107 232.6133 15.56988243 51607","1 46922U 98067RS  21276.05464107  .00039450  00000-0  47996-3 0  9997\n2 46922  51.6412 155.4130 0002672 142.6490 217.4689 15.60136839 51607","1 46923U 98067RT  21275.38771339  .00017269  00000-0  24249-3 0  9991\n2 46923  51.6408 162.1760 0002726 134.5273 225.5942 15.56817882 51539","1 46924U 98067RU  21275.90183858  .00095928  00000-0  82593-3 0  9997\n2 46924  51.6364 149.0636 0003847 182.7770 177.3206 15.68508743 51701","1 46925U 98067RV  21275.69403858  .00109626  00000-0  85262-3 0  9996\n2 46925  51.6413 148.4979 0003325 183.8552 176.2421 15.70908672 51672","1 46926U 98067RW  21276.04230893  .00089225  00000-0  78178-3 0  9994\n2 46926  51.6413 148.5799 0002112 174.4093 185.6927 15.68117059 51711","1 46927U 98067RX  21275.39278870  .00018340  00000-0  25681-3 0  9990\n2 46927  51.6403 162.2056 0002891 149.3945 210.7216 15.56844933 51447","1 47853U 98067RZ  21276.13813800  .00003900  00000-0  76199-4 0  9997\n2 47853  51.6430 167.9079 0003317 124.5440 235.5863 15.50030565 31962","1 47925U 98067SB  21275.71934599  .00024554  00000-0  37453-3 0  9996\n2 47925  51.6418 166.6253 0002625  98.2522 261.8767 15.54308163 31441","1 47926U 98067SC  21276.08521465  .00036827  00000-0  53266-3 0  9998\n2 47926  51.6406 163.8107 0003443  95.8018 264.3366 15.55542150 31505","1 47927U 98067SD  21276.12857940  .00022443  00000-0  34805-3 0  9991\n2 47927  51.6415 164.8587 0002626  94.1392 265.9899 15.53907958 31505","1 47928U 98067SE  21276.08175299  .00036647  00000-0  53577-3 0  9995\n2 47928  51.6414 164.5357 0006224 149.7732 210.3619 15.55239008 31487","1 47976U 98067SJ  21275.96283606  .00008437  00000-0  15105-3 0  9997\n2 47976  51.6451 168.2101 0003438 126.0592 234.0722 15.50859737 30226","1 48159U 21029A   21275.52277778  .00006056  00000-0  11838-3 0  9994\n2 48159  51.6451 172.0044 0004138  50.9000 316.9051 15.48905523305239","1 48209U 21030A   21275.52277778  .00006056  00000-0  11838-3 0  9992\n2 48209  51.6451 172.0044 0004138  50.9000 316.9051 15.48905523305235","1 48274U 21035A   21276.20226274  .00005709  00000-0  68891-4 0  9996\n2 48274  41.4715 344.1978 0000805 355.6503  54.7764 15.61399628 24598","1 48803U 21046A   21275.52799769  .00005584  00000-0  67490-4 0  9999\n2 48803  41.4714 348.3038 0000826 349.3568 226.0594 15.61390809 24487","1 48850U 98067SL  21275.27701371  .00012652  00000-0  21845-3 0  9999\n2 48850  51.6421 171.8901 0004706 166.0146 194.0975 15.51375311 17087","1 48851U 98067SM  21276.13230103  .00057638  00000-0  82582-3 0  9994\n2 48851  51.6387 166.3427 0005783 165.3754 194.7406 15.55588345 17278","1 48867U 98067SN  21275.26868438  .00015187  00000-0  25801-3 0  9996\n2 48867  51.6415 171.8371 0003092 191.5049 168.5871 15.51659478 15832","1 48868U 98067SP  21276.08457768  .00035047  00000-0  55720-3 0  9998\n2 48868  51.6413 167.5362 0003776 164.5830 195.5276 15.52964526 15990","1 48869U 21057A   21275.52277778  .00006056  00000-0  11838-3 0  9993\n2 48869  51.6451 172.0044 0004138  50.9000 316.9051 15.48905523305237","1 49044U 21066A   21275.52277778  .00006056  00000-0  11838-3 0  9999\n2 49044  51.6451 172.0044 0004138  50.9000 316.9051 15.48905523305233","1 49064U 21072A   21275.52277778  .00006056  00000-0  11838-3 0  9998\n2 49064  51.6451 172.0044 0004138  50.9000 316.9051 15.48905523305235"];

//satellites.forEach(element => addSatellite(viewer, element, false, Cesium.Color.BLUE));
let dataFile = require('./debris.json');

var tleArr = [];
let obj1 = JSON.stringify(dataFile);
let obj = JSON.parse(obj1);

getTLE(obj);

var contTLE={
  x: tleArr,
}

function getTleArr(){
  return tleArr;
}

//Stringify JS object to tle, then use tle in main script
function getTLENoArg(){
  return getTLE(obj1);
}

function getTLE(obj){

    for(let i in obj){
      try{
        var totalTLE = i.TLE_LINE0 + "\n" + i.TLE_LINE0;
        tleArr.push(totalTLE);
      } catch (e){
        return tleArr;
      }


    }

  return tleArr;
}

const satWithName = getTleArr();

satWithName.forEach(element => addSatellite(viewer, element, false));


// Wait for globe to load then zoom out     
let initialized = false;
viewer.scene.globe.tileLoadProgressEvent.addEventListener(() => {
  if (!initialized && viewer.scene.globe.tilesLoaded === true) {
    viewer.clock.shouldAnimate = true;
    initialized = true;
    viewer.scene.camera.zoomOut(7000000);
    document.querySelector("#loading").classList.toggle('disappear', true)
  }
});

function addSatellite(viewer, tle, track){
  const satrec = satellite.twoline2satrec(
  tle.split('\n')[1].trim(),
  tle.split('\n')[2].trim()
  );

  var color;



  if(tle.includes("ZARYA")){
    color = Cesium.Color.WHITE;
    track = true;
    }
  else{
    if(tle.includes("DEB")||tle.includes("R/B")) color = Cesium.Color.RED;
    else color = Cesium.Color.YELLOW;
    }

  const positionsOverTime = new Cesium.SampledPositionProperty();
  for (let i = 0; i < totalSeconds; i += timestepInSeconds) {
    const time = Cesium.JulianDate.addSeconds(start, i, new Cesium.JulianDate());
    const jsDate = Cesium.JulianDate.toDate(time);

    const positionAndVelocity = satellite.propagate(satrec, jsDate);
    const gmst = satellite.gstime(jsDate);
    const p = satellite.eciToGeodetic(positionAndVelocity.position, gmst);

    const position = Cesium.Cartesian3.fromRadians(p.longitude, p.latitude, p.height * 1000);
    positionsOverTime.addSample(time, position);
  }

// Visualize the satellite with a red dot.
  const satellitePoint = viewer.entities.add({
    position: positionsOverTime,
    point: { pixelSize: 5, color: color }
  });

  // Set the camera to follow the satellite 
  if(track) viewer.trackedEntity = satellitePoint;
}