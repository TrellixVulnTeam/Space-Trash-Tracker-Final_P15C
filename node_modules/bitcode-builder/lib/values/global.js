"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const utils_1 = require("../utils");
const attribute_list_1 = require("../attribute-list");
const base_1 = require("./base");
class Global extends base_1.Value {
    constructor(ty, name, init) {
        super(ty);
        this.name = name;
        this.init = init;
        this.attrs = new attribute_list_1.AttributeList();
        this.linkage = 'external';
        this.privIsConstant = false;
        assert(ty.isPointer(), 'Can\'t declare global with non-pointer type');
        assert(utils_1.validateName(name), `Invalid characters in Global name: "${name}"`);
        if (init !== undefined) {
            assert(init.ty.isEqual(ty.toPointer().to), 'Incompatible type of initialization value for global variable');
        }
    }
    hasConstantValue() { return this.privIsConstant; }
    markConstant() {
        assert(this.init !== undefined, 'Can\'t mark global without init value as constant');
        this.privIsConstant = true;
    }
    toString() {
        return `[global ${this.name}]`;
    }
}
exports.Global = Global;
//# sourceMappingURL=global.js.map