"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const base_1 = require("./base");
const common_1 = require("./common");
function getElementPtrType(value, index) {
    const ptr = value.ty.toPointer();
    if (index === undefined) {
        return ptr;
    }
    if (ptr.to.isArray() && !index.isConstant()) {
        return ptr.to.toArray().elemType.ptr();
    }
    const indexConst = index.toConstant();
    assert(indexConst.isInt(), 'Expected integer constant offset for `getelementptr`');
    return common_1.getAggrFieldType(ptr.to, indexConst.toInt().value).ptr();
}
// TODO(indutny): support `inrange`
// TODO(indutny): support more indices?
class GetElementPtr extends base_1.Instruction {
    constructor(ptr, ptrIndex, index, inbounds = false) {
        super(getElementPtrType(ptr, index), 'getelementptr', index === undefined ? [ptr, ptrIndex] : [ptr, ptrIndex, index]);
        this.ptr = ptr;
        this.ptrIndex = ptrIndex;
        this.index = index;
        this.inbounds = inbounds;
    }
}
exports.GetElementPtr = GetElementPtr;
//# sourceMappingURL=getelementptr.js.map