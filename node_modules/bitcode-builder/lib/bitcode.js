"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const buffer_1 = require("buffer");
const attribute_list_1 = require("./attribute-list");
exports.AttributeList = attribute_list_1.AttributeList;
const passes = require("./passes");
exports.passes = passes;
const types = require("./types");
exports.types = types;
const values = require("./values");
exports.values = values;
var constants = values.constants;
const CHAR_WIDTH = 8;
class Builder {
    // Types
    static void() {
        return new types.Void();
    }
    static i(width) {
        return new types.Int(width);
    }
    static signature(returnType, params) {
        return new types.Signature(returnType, params);
    }
    static array(length, elemType) {
        return new types.Array(length, elemType);
    }
    static struct(name) {
        return new types.Struct(name);
    }
    // Values
    static global(ty, name, init) {
        return new values.Global(ty, name, init);
    }
    static cstring(value) {
        const len = buffer_1.Buffer.byteLength(value);
        const blob = buffer_1.Buffer.alloc(len + 1);
        blob.write(value);
        return Builder.blob(buffer_1.Buffer.from(blob));
    }
    static blob(buffer) {
        const elemTy = Builder.i(CHAR_WIDTH);
        const ty = Builder.array(buffer.length, elemTy);
        const elems = Array.from(buffer).map((ch) => elemTy.val(ch));
        return ty.val(elems);
    }
    // Metadata
    static metadata(value) {
        return new constants.Metadata(value);
    }
    // Convenience methods
    void() { return Builder.void(); }
    i(width) { return Builder.i(width); }
    signature(returnType, params) {
        return Builder.signature(returnType, params);
    }
    array(length, elemType) {
        return Builder.array(length, elemType);
    }
    struct(name) { return Builder.struct(name); }
    global(ty, name, init) {
        return Builder.global(ty, name, init);
    }
    cstring(value) {
        return Builder.cstring(value);
    }
    blob(buffer) {
        // TODO(indutny): cache results?
        return Builder.blob(buffer);
    }
    metadata(value) {
        return Builder.metadata(value);
    }
}
exports.Builder = Builder;
//# sourceMappingURL=bitcode.js.map