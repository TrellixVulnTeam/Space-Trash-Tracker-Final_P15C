"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
class AttributeList {
    constructor() {
        this.list = [];
    }
    add(attr) {
        if (Array.isArray(attr)) {
            let changed = false;
            attr.forEach((sub) => {
                if (this.add(sub)) {
                    changed = true;
                }
            });
            return changed;
        }
        // XXX(indutny): `Array.isArray` above doesn't work as a type guard
        const single = attr;
        if (typeof single === 'string') {
            if (this.list.includes(single)) {
                return false;
            }
        }
        else {
            const found = this.list.some((entry) => {
                if (typeof entry === 'string') {
                    return false;
                }
                if (entry.key !== single.key) {
                    return false;
                }
                assert.strictEqual(entry.value, single.value, `Conflicting attribute value for "${entry.key}"`);
                return true;
            });
            if (found) {
                return false;
            }
        }
        this.list.push(single);
        return true;
    }
    delete(attr) {
        if (Array.isArray(attr)) {
            let changed = false;
            attr.forEach((sub) => {
                if (this.delete(sub)) {
                    changed = true;
                }
            });
            return changed;
        }
        const single = attr;
        if (typeof single === 'string') {
            const index = this.list.indexOf(single);
            if (index === -1) {
                return false;
            }
            this.list.splice(index, 1);
            return true;
        }
        let foundAt = false;
        this.list.some((entry, i) => {
            if (typeof entry === 'string') {
                return false;
            }
            if (entry.key !== single.key) {
                return false;
            }
            if (entry.value !== single.value) {
                return false;
            }
            foundAt = i;
            return true;
        });
        if (foundAt === false) {
            return false;
        }
        this.list.splice(foundAt, 1);
        return true;
    }
    *[Symbol.iterator]() {
        yield* this.list;
    }
}
exports.AttributeList = AttributeList;
//# sourceMappingURL=attribute-list.js.map