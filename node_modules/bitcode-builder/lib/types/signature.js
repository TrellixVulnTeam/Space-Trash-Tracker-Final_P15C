"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const values = require("../values");
const base_1 = require("./base");
class Signature extends base_1.Type {
    constructor(returnType, params) {
        super(`${returnType.typeString} ` +
            `(${params.map((p) => p.typeString).join(', ')})`);
        this.returnType = returnType;
        this.params = params;
    }
    isEqual(to) {
        if (this === to) {
            return true;
        }
        // Pointer to signature is equal to the signature
        if (to.isPointer()) {
            const toPtr = to;
            if (toPtr.to.isSignature()) {
                return this.isEqual(toPtr.to);
            }
            return false;
        }
        if (!to.isSignature()) {
            return false;
        }
        const toSig = to;
        return toSig.returnType.isEqual(this.returnType) &&
            toSig.params.length === this.params.length &&
            toSig.params.every((param, i) => param.isEqual(this.params[i]));
    }
    declareFunction(name) {
        return new values.constants.Declaration(this, name);
    }
    defineFunction(name, paramNames) {
        assert.strictEqual(paramNames.length, this.params.length, 'Invalid parameter count for `.defineFunction()`');
        return new values.constants.Func(this, name, paramNames);
    }
}
exports.Signature = Signature;
//# sourceMappingURL=signature.js.map