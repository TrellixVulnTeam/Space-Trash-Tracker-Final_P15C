"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const array_1 = require("./array");
const blob_1 = require("./blob");
const char6_1 = require("./char6");
const fixed_1 = require("./fixed");
const literal_1 = require("./literal");
const vbr_1 = require("./vbr");
const IS_LITERAL_WIDTH = 1;
const LITERAL_VALUE_WIDTH = 8;
const ENC_WIDTH = 3;
const VALUE_WIDTH = 5;
const OPERAND_COUNT_WIDTH = 5;
const LITERAL = 1;
const NOT_LITERAL = 0;
const FIXED_ENC = 1;
const VBR_ENC = 2;
const ARRAY_ENC = 3;
const CHAR6_ENC = 4;
const BLOB_ENC = 5;
class Abbr {
    constructor(name, operands) {
        this.name = name;
        this.operands = operands;
        // TODO(indutny): check that Blob and Array are the last operands
        // (if present)
        let count = 0;
        function countOperand(operand) {
            count++;
            if (operand instanceof array_1.Array) {
                countOperand(operand.elemOp);
            }
        }
        operands.forEach(countOperand);
        this.operandCount = count;
    }
    // Convenience methods
    static literal(value) {
        return new literal_1.Literal(value);
    }
    static fixed(width) {
        return new fixed_1.Fixed(width);
    }
    static vbr(width) {
        return new vbr_1.VBR(width);
    }
    static array(elemOp) {
        return new array_1.Array(elemOp);
    }
    static char6() {
        return new char6_1.Char6();
    }
    static blob() {
        return new blob_1.Blob();
    }
    // Internal APIs
    writeDefinition(writer) {
        writer.writeVBR(this.operandCount, OPERAND_COUNT_WIDTH);
        this.operands.forEach(function defineOperand(operand) {
            if (operand instanceof literal_1.Literal) {
                writer.writeBits(LITERAL, IS_LITERAL_WIDTH);
                writer.writeVBR(operand.value, LITERAL_VALUE_WIDTH);
                return;
            }
            writer.writeBits(NOT_LITERAL, IS_LITERAL_WIDTH);
            if (operand instanceof fixed_1.Fixed) {
                writer.writeBits(FIXED_ENC, ENC_WIDTH);
                writer.writeVBR(operand.width, VALUE_WIDTH);
            }
            else if (operand instanceof vbr_1.VBR) {
                writer.writeBits(VBR_ENC, ENC_WIDTH);
                writer.writeVBR(operand.width, VALUE_WIDTH);
            }
            else if (operand instanceof array_1.Array) {
                writer.writeBits(ARRAY_ENC, ENC_WIDTH);
                defineOperand(operand.elemOp);
            }
            else if (operand instanceof char6_1.Char6) {
                writer.writeBits(CHAR6_ENC, ENC_WIDTH);
            }
            else if (operand instanceof blob_1.Blob) {
                writer.writeBits(BLOB_ENC, ENC_WIDTH);
            }
        });
    }
    write(writer, values) {
        let i = 0;
        this.operands.forEach((operand) => {
            // Implicit
            if (operand instanceof literal_1.Literal) {
                return;
            }
            assert(i < values.length, '`encode()` wasn\'t give enough values');
            operand.encode(writer, values[i++]);
        });
        assert.strictEqual(i, values.length, '`encode()` was given more values than encoded');
    }
}
exports.Abbr = Abbr;
//# sourceMappingURL=abbr.js.map