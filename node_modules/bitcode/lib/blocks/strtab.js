"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const buffer_1 = require("buffer");
const bitstream_1 = require("../bitstream");
const constants_1 = require("../constants");
const base_1 = require("./base");
const STRTAB_ABBR_ID_WIDTH = 3;
class StrtabBlock extends base_1.Block {
    constructor() {
        super(...arguments);
        this.list = [];
        this.map = new Map();
        this.totalSize = 0;
    }
    add(str) {
        this.checkNotBuilt();
        if (this.map.has(str)) {
            return this.map.get(str);
        }
        const buffer = buffer_1.Buffer.from(str);
        const entry = {
            buffer,
            length: buffer.length,
            offset: this.totalSize,
        };
        this.totalSize += buffer.length;
        this.list.push(entry);
        this.map.set(str, entry);
        return entry;
    }
    build(writer) {
        super.build(writer);
        if (this.list.length === 0) {
            return;
        }
        writer.enterBlock(constants_1.BLOCK_ID.STRTAB, STRTAB_ABBR_ID_WIDTH);
        // TODO(indutny): can we do char6 here?
        writer.defineAbbr(new bitstream_1.Abbr('blob', [
            bitstream_1.Abbr.literal(constants_1.STRTAB_CODE.BLOB),
            bitstream_1.Abbr.blob(),
        ]));
        writer.writeRecord('blob', [
            buffer_1.Buffer.concat(this.list.map((e) => e.buffer), this.totalSize),
        ]);
        writer.endBlock(constants_1.BLOCK_ID.STRTAB);
    }
}
exports.StrtabBlock = StrtabBlock;
//# sourceMappingURL=strtab.js.map