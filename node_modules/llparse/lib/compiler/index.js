"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Compiler = void 0;
const debugAPI = require("debug");
const frontend = require("llparse-frontend");
const bitcodeImpl = require("../implementation/bitcode");
const cImpl = require("../implementation/c");
const jsImpl = require("../implementation/js");
const header_builder_1 = require("./header-builder");
const debug = debugAPI('llparse:compiler');
class Compiler {
    constructor(prefix, options) {
        this.prefix = prefix;
        this.options = options;
    }
    compile(root, properties) {
        debug('Combining implementations');
        const container = new frontend.Container();
        let bitcode;
        if (this.options.generateBitcode !== false) {
            bitcode = new bitcodeImpl.BitcodeCompiler(container, {
                debug: this.options.debug,
            });
        }
        let c;
        if (this.options.generateC !== false) {
            c = new cImpl.CCompiler(container, Object.assign({
                debug: this.options.debug,
            }, this.options.c));
        }
        let js;
        if (this.options.generateJS !== false) {
            js = new jsImpl.JSCompiler(container, Object.assign({
                debug: this.options.debug,
            }, this.options.js));
        }
        debug('Running frontend pass');
        const f = new frontend.Frontend(this.prefix, container.build(), this.options.frontend);
        const info = f.compile(root, properties);
        debug('Building header');
        const hb = new header_builder_1.HeaderBuilder();
        const header = hb.build({
            headerGuard: this.options.headerGuard,
            prefix: this.prefix,
            properties,
            spans: info.spans,
        });
        const result = {
            bitcode: undefined,
            header,
        };
        debug('Building bitcode');
        if (bitcode) {
            result.bitcode = bitcode.compile(info);
        }
        debug('Building C');
        if (c) {
            result.c = c.compile(info);
        }
        debug('Building JS');
        if (js) {
            result.js = js.compile(info);
        }
        return result;
    }
}
exports.Compiler = Compiler;
//# sourceMappingURL=index.js.map