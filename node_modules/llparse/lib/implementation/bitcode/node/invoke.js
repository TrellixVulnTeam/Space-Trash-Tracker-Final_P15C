"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Invoke = void 0;
const frontend = require("llparse-frontend");
const base_1 = require("./base");
class Invoke extends base_1.Node {
    doBuild(bb, pos) {
        const ctx = this.compilation;
        const code = ctx.unwrapCode(this.ref.code);
        const codeDecl = code.build(ctx);
        const args = [
            ctx.stateArg(bb),
            pos.current,
            ctx.endPosArg(bb),
        ];
        const signature = code.ref.signature;
        if (signature === 'value') {
            args.push(ctx.matchArg(bb));
        }
        const call = bb.call(codeDecl, args);
        const keys = this.ref.edges.map((edge) => edge.code);
        const s = ctx.switch(bb, call, keys, {
            cases: this.ref.edges.map((edge) => {
                return edge.node.ref instanceof frontend.node.Error ?
                    'unlikely' : 'likely';
            }),
            otherwise: this.ref.otherwise instanceof frontend.node.Error ?
                'unlikely' : 'likely',
        });
        s.cases.forEach((childBB, index) => {
            const edge = this.ref.edges[index];
            this.tailTo(childBB, {
                noAdvance: true,
                node: edge.node,
                value: undefined,
            }, pos);
        });
        this.tailTo(s.otherwise, this.ref.otherwise, pos);
    }
}
exports.Invoke = Invoke;
//# sourceMappingURL=invoke.js.map