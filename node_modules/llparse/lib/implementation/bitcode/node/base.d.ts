import * as frontend from 'llparse-frontend';
import { Compilation, IRBasicBlock, IRDeclaration, IRPhi, IRValue } from '../compilation';
export interface INodeEdge {
    readonly node: frontend.IWrap<frontend.node.Node>;
    readonly noAdvance: boolean;
    readonly value?: number;
}
export interface INodePosition {
    readonly current: IRValue;
    readonly next: IRValue;
}
export interface ITail {
    readonly block: IRBasicBlock;
    readonly phi: IRPhi;
}
declare type TransformWrap = frontend.IWrap<frontend.transform.Transform>;
export declare abstract class Node<T extends frontend.node.Node> {
    readonly ref: T;
    private privCompilation;
    private cachedDecl;
    private tailMap;
    constructor(ref: T);
    build(ctx: Compilation): IRDeclaration;
    protected abstract doBuild(bb: IRBasicBlock, pos: INodePosition): void;
    protected get compilation(): Compilation;
    protected applyTransform(transform: TransformWrap, bb: IRBasicBlock, value: IRValue): IRValue;
    protected prologue(bb: IRBasicBlock, pos: INodePosition): IRBasicBlock;
    protected pause(bb: IRBasicBlock): void;
    protected tailTo(bb: IRBasicBlock, edge: INodeEdge, pos: INodePosition): void;
}
export {};
