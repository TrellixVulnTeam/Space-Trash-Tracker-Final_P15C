import * as frontend from 'llparse-frontend';
import { Consume } from './consume';
import { Empty } from './empty';
import { Invoke } from './invoke';
import { Pause } from './pause';
import { Sequence } from './sequence';
import { Single } from './single';
import { SpanEnd } from './span-end';
import { SpanStart } from './span-start';
import { TableLookup } from './table-lookup';
export * from './base';
declare const _default: {
    Consume: typeof Consume;
    Empty: typeof Empty;
    Error: {
        new (ref: frontend.node.Error): {
            storeError(bb: import("bitcode-builder/lib/values").BasicBlock, pos: import("./base").INodePosition): import("bitcode-builder/lib/values").BasicBlock;
            doBuild(bb: import("bitcode-builder/lib/values").BasicBlock, pos: import("./base").INodePosition): void;
            privCompilation: import("../compilation").Compilation | undefined;
            cachedDecl: import("bitcode-builder/lib/values/constants").Declaration | undefined;
            tailMap: Map<boolean, Map<import("./base").Node<frontend.node.Node>, import("./base").ITail>>;
            readonly ref: frontend.node.Error;
            build(ctx: import("../compilation").Compilation): import("bitcode-builder/lib/values/constants").Declaration;
            readonly compilation: import("../compilation").Compilation;
            applyTransform(transform: frontend.IWrap<frontend.transform.Transform>, bb: import("bitcode-builder/lib/values").BasicBlock, value: import("bitcode-builder/lib/values").Value): import("bitcode-builder/lib/values").Value;
            prologue(bb: import("bitcode-builder/lib/values").BasicBlock, pos: import("./base").INodePosition): import("bitcode-builder/lib/values").BasicBlock;
            pause(bb: import("bitcode-builder/lib/values").BasicBlock): void;
            tailTo(bb: import("bitcode-builder/lib/values").BasicBlock, edge: import("./base").INodeEdge, pos: import("./base").INodePosition): void;
        };
    };
    Invoke: typeof Invoke;
    Pause: typeof Pause;
    Sequence: typeof Sequence;
    Single: typeof Single;
    SpanEnd: typeof SpanEnd;
    SpanStart: typeof SpanStart;
    TableLookup: typeof TableLookup;
};
export default _default;
