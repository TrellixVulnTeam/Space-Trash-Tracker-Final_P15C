"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Code = void 0;
const constants_1 = require("../constants");
class Code {
    constructor(ref) {
        this.ref = ref;
    }
    getSignature(ctx) {
        switch (this.ref.signature) {
            case 'match': return ctx.signature.callback.match;
            case 'value': return ctx.signature.callback.value;
            case 'span': return ctx.signature.callback.span;
            default: throw new Error(`Unknown signature "${this.ref.signature}"`);
        }
    }
    getParams() {
        // TODO(indutny): move this to `Compilation`, or move above signatures here?
        switch (this.ref.signature) {
            case 'match': return [constants_1.ARG_STATE, constants_1.ARG_POS, constants_1.ARG_ENDPOS];
            case 'value': return [constants_1.ARG_STATE, constants_1.ARG_POS, constants_1.ARG_ENDPOS, constants_1.ARG_MATCH];
            case 'span': return [constants_1.ARG_STATE, constants_1.ARG_POS, constants_1.ARG_ENDPOS];
            default: throw new Error(`Unknown signature "${this.ref.signature}"`);
        }
    }
    setAttributes(decl) {
        // TODO(indutny): move this to `Compilation`, or move above signatures here?
        switch (this.ref.signature) {
            case 'value':
                decl.paramAttrs[3].add(constants_1.ATTR_MATCH);
            case 'match':
            case 'span':
                decl.paramAttrs[2].add(constants_1.ATTR_ENDPOS);
                decl.paramAttrs[1].add(constants_1.ATTR_POS);
                decl.paramAttrs[0].add(constants_1.ATTR_STATE);
                break;
            default: throw new Error(`Unknown signature "${this.ref.signature}"`);
        }
    }
}
exports.Code = Code;
//# sourceMappingURL=base.js.map