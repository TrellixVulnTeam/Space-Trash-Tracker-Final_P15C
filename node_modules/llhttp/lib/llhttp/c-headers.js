"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants = require("./constants");
const utils_1 = require("./utils");
class CHeaders {
    build() {
        let res = '';
        res += '#ifndef LLLLHTTP_C_HEADERS_\n';
        res += '#define LLLLHTTP_C_HEADERS_\n';
        res += '#ifdef __cplusplus\n';
        res += 'extern "C" {\n';
        res += '#endif\n';
        res += '\n';
        const errorMap = utils_1.enumToMap(constants.ERROR);
        const methodMap = utils_1.enumToMap(constants.METHODS);
        res += this.buildEnum('llhttp_errno', 'HPE', errorMap);
        res += '\n';
        res += this.buildEnum('llhttp_flags', 'F', utils_1.enumToMap(constants.FLAGS), 'hex');
        res += '\n';
        res += this.buildEnum('llhttp_type', 'HTTP', utils_1.enumToMap(constants.TYPE));
        res += '\n';
        res += this.buildEnum('llhttp_finish', 'HTTP_FINISH', utils_1.enumToMap(constants.FINISH));
        res += '\n';
        res += this.buildEnum('llhttp_method', 'HTTP', methodMap);
        res += '\n';
        res += this.buildMap('HTTP_ERRNO', errorMap);
        res += '\n';
        res += this.buildMap('HTTP_METHOD', methodMap);
        res += '\n';
        res += '\n';
        res += '#ifdef __cplusplus\n';
        res += '}  /* extern "C" */\n';
        res += '#endif\n';
        res += '#endif  /* LLLLHTTP_C_HEADERS_ */\n';
        return res;
    }
    buildEnum(name, prefix, map, encoding = 'none') {
        let res = '';
        res += `enum ${name} {\n`;
        const keys = Object.keys(map);
        keys.forEach((key, i) => {
            const isLast = i === keys.length - 1;
            let value = map[key];
            if (encoding === 'hex') {
                value = `0x${value.toString(16)}`;
            }
            res += `  ${prefix}_${key.replace(/-/g, '')} = ${value}`;
            if (!isLast) {
                res += ',\n';
            }
        });
        res += '\n};\n';
        res += `typedef enum ${name} ${name}_t;\n`;
        return res;
    }
    buildMap(name, map) {
        let res = '';
        res += `#define ${name}_MAP(XX) \\\n`;
        Object.keys(map).forEach((key) => {
            res += `  XX(${map[key]}, ${key.replace(/-/g, '')}, ${key}) \\\n`;
        });
        res += '\n';
        return res;
    }
}
exports.CHeaders = CHeaders;
//# sourceMappingURL=c-headers.js.map